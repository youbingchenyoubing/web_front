import path from 'path';
import fs from 'fs';
const root = process.cwd();
const normalizeURL = (url) => {
    return process.platform === "win32" ? `/${url.replace(/\\/g, "/")}` : url;
};
const loadPathEnvFile = (envMap, loadPath) => {
    if (!Array.isArray(loadPath)) {
        return;
    }
    return Promise.all(loadPath.map(async (filePath) => {
        const pp = path.resolve(root, filePath);
        if (!fs.existsSync(pp)) {
            return;
        }
        const fileConfig = await import(normalizeURL(pp));
        setLineConfig(envMap, fileConfig.default);
    }));
};
const loadPackageConfig = (envMap) => {
    const pkgPath = path.resolve(root, 'package.json');
    if (!fs.existsSync(pkgPath)) {
        return;
    }
    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
    setLineConfig(envMap, pkg['vite-env']);
};
const setLineConfig = (envMap, lineEnv) => {
    if (!lineEnv) {
        return;
    }
    Object.keys(lineEnv).forEach(mode => {
        let config = envMap.get(mode);
        if (!config) {
            envMap.set(mode, (config = {}));
        }
        const lineConfig = lineEnv[mode];
        Object.keys(lineConfig).forEach(key => {
            config[key] = lineConfig[key];
        });
    });
};
export default function ViteEnvConfigPlugin(inlineConfig) {
    return {
        name: 'set-env-plugin',
        enforce: 'pre',
        async config(config, { mode }) {
            const { envPrefix = 'VITE_', env, loadPath } = inlineConfig;
            if (envPrefix) {
                config.envPrefix = envPrefix;
            }
            const envMap = new Map();
            await loadPathEnvFile(envMap, loadPath).catch(() => null);
            loadPackageConfig(envMap);
            setLineConfig(envMap, env);
            const activeEnvConfig = envMap.get(mode);
            if (activeEnvConfig) {
                Object.keys(activeEnvConfig).forEach(key => {
                    process.env[envPrefix + key] = activeEnvConfig[key];
                });
            }
        }
    };
}
//# sourceMappingURL=index.mjs.map